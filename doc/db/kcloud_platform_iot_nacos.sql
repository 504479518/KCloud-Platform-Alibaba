create table if not exists public.config_info
(
	id                 bigint generated by default as identity
	primary key,
	data_id            varchar(255)                           not null,
	group_id           varchar(128),
	content            text                                   not null,
	md5                varchar(32),
	gmt_create         timestamp(6) default CURRENT_TIMESTAMP not null,
	gmt_modified       timestamp(6) default CURRENT_TIMESTAMP not null,
	src_user           text,
	src_ip             varchar(50),
	app_name           varchar(128),
	tenant_id          varchar(128) default ''::character varying,
	c_desc             varchar(256),
	c_use              varchar(64),
	effect             varchar(64),
	type               varchar(64),
	c_schema           text,
	encrypted_data_key text                                   not null
	);

comment on table public.config_info is 'config_info';

comment on column public.config_info.id is 'id';

comment on column public.config_info.data_id is 'data_id';

comment on column public.config_info.content is 'content';

comment on column public.config_info.md5 is 'md5';

comment on column public.config_info.gmt_create is '创建时间';

comment on column public.config_info.gmt_modified is '修改时间';

comment on column public.config_info.src_user is 'source user';

comment on column public.config_info.src_ip is 'source ip';

comment on column public.config_info.tenant_id is '租户字段';

comment on column public.config_info.encrypted_data_key is '秘钥';

alter table public.config_info
	owner to root;

create unique index if not exists config_info_data_id_group_id_tenant_id_idx
	on public.config_info (data_id, group_id, tenant_id);

INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (16, 'application-common-redis.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

# spring
spring:
  data:
    # redis
    redis:
      client-type: lettuce
      host: redis.laokou.org
      port: 6379
      password: ENC(XVR9OF604T3+2BINpvvCohjr7/KM/vuP3ZgYpu+FX/h3uogFI3sh26h8wHPBE+rj)
      connect-timeout: 60000ms #连接超时时长（毫秒）
      timeout: 60000ms #超时时长（毫秒）
      lettuce:
        pool:
          max-active: 20 #连接池最大连接数（使用负值表示无极限）
          max-wait: -1 #连接池最大阻塞等待时间（使用负值表示没有限制）
          max-idle: 10 #连接池最大空闲连接
          min-idle: 5 #连接池最小空间连接', 'c8c0e7fbaa49086163b00c1c8e1fa454', '2023-01-13 12:15:59.000000', '2023-11-06 18:02:43.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'redis公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (17, 'application-common.yaml', 'LAOKOU_GROUP', e'# spring
spring:
  # security
  security:
    oauth2:
      resource-server:
        enabled: true
        request-matcher:
          ignore-patterns:
            GET:
              - /**/v3/api-docs/**=laokou-gateway
              - /v3/api-docs/**=laokou-auth,laokou-admin,laokou-flowable
              - /swagger-ui.html=laokou-admin,laokou-gateway,laokou-auth,laokou-flowable
              - /swagger-ui/**=laokou-admin,laokou-gateway,laokou-auth,laokou-flowable
              - /actuator/**=laokou-admin,laokou-gateway,laokou-auth,laokou-flowable
              - /error=laokou-admin,laokou-auth
              - /v1/tenants/option-list=laokou-auth,laokou-gateway
              - /v1/tenants/id=laokou-auth,laokou-gateway
              - /favicon.ico=laokou-gateway
              - /v1/captchas/{uuid}=laokou-gateway,laokou-auth
              - /v1/secrets=laokou-gateway,laokou-auth
              - /graceful-shutdown=laokou-auth
              - /ws=laokou-gateway
            DELETE:
              - /v1/logouts=laokou-auth,laokou-gateway
  # task
  task-execution:
    thread-name-prefix: laokou-ttl-task-
    pool:
      core-size: 17
      keep-alive: 180s
  cloud:
    # 解决集成sentinel，openfeign启动报错，官方下个版本修复
    openfeign:
      compression:
        response:
          enabled: true
        request:
          enabled: true
      # FeignAutoConfiguration、OkHttpFeignLoadBalancerConfiguration、OkHttpClient#getClient、FeignClientProperties、OptionsFactoryBean#getObject
      # 在BeanFactory调用getBean()时，不是调用getBean，是调用getObject(),因此，getObject()相当于代理了getBean(),而且getObject()对Options初始化，是直接从openfeign.default获取配置值的
      okhttp:
        enabled: true
      circuitbreaker:
        enabled: true
      httpclient:
        enabled: false
        hc5:
          enabled: false
        disable-ssl-validation: true
      client:
        config:
          default:
            connectTimeout: 120000 #连接超时
            readTimeout: 120000 #读取超时
            logger-level: full
      lazy-attributes-resolution: true
    # sentinel
    sentinel:
      eager: true #开启饥饿加载，直接初始化
      transport:
        port: 8769
        dashboard: sentinel.laokou.org:8972

# actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# springdoc
springdoc:
  swagger-ui:
    path: /swagger-ui.html

# server
server:
  servlet:
    encoding:
      charset: UTF-8
  undertow:
    threads:
      # 设置IO线程数，来执行非阻塞任务，负责多个连接数
      io: 16
      # 工作线程数
      worker: 256
    # 每块buffer的空间大小
    buffer-size: 1024
    # 分配堆外内存
    direct-buffers: true

# feign
feign:
  sentinel:
    enabled: true
    default-rule: default
    rules:
      # https://sentinelguard.io/zh-cn/docs/circuit-breaking.html
      default:
        - grade: 2 # 异常数策略
          count: 1 # 异常数模式下为对应的阈值
          timeWindow: 30 # 熔断时长，单位为 s（经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。ERROR_COUNT）
          statIntervalMs: 1000 # 统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）
          minRequestAmount: 5 # 熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断
tenant:
  domain-names:
    - laokou.org
    - laokouyun.org
    - laokou.org.cn', '221f193df273602fcd6e728e9bb98956', '2023-01-13 12:16:46.000000', '2024-04-28 23:05:43.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (26, 'router.json', 'LAOKOU_GROUP', e'[
  {
    "id": "laokou-auth",
    "uri": "lb://laokou-auth",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/auth/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "auth",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/auth/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  },
  {
    "id": "laokou-admin",
    "uri": "lb://laokou-admin",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/admin/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "admin",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/admin/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  },
  {
    "id": "open-api",
    "uri": "http://127.0.0.1:5555",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/v3/api-docs/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "open-api",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/v3/api-docs/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}/v3/api-docs"
        }
      }
    ],
    "metadata": {},
    "order": 1
  },
  {
    "id": "laokou-im",
    "uri": "lb:wss://laokou-im",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/im/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "im",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/im/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  },
  {
    "id": "laokou-flowable",
    "uri": "lb://laokou-flowable",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/flowable/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "flowable",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/flowable/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  }
]', 'b773792ee46cfa7c4e87356c577820f4', '2023-01-13 15:44:25.000000', '2023-12-21 17:49:19.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-gateway', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '动态路由配置', '', '', 'json', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (82, 'application-monitor.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

# spring
spring:
  boot:
    # admin
    admin:
      discovery:
        ignored-services:
          - laokou-im
      notify:
        mail:
          from: 2413176044@qq.com
          to: 2413176044@qq.com
          template: META-INF/spring-boot-admin-server/mail/status-changed.html
  # security
  security:
    user:
      # root
      name: ENC(esZnNM2DrSxZhgTOzu11W2fVsJDDZ1b12aPopMMHCS7lF5+BJun9ri6y5pTUdj6L)
      # laokou123
      password: ENC(mHjKcITM5U60bq7M4fxh4yUQ9L3PPWPskvnWRE0PVxIqQ34Ztx7zOESwWCdjeWPW)
  # mail
  mail:
    host: smtp.qq.com
    password: ENC(JDMVbM278SLa9qbk5oMeJUs6St0dpLRSQyI7lPKGUFFzxSMZcfps2+vXBVyAXXB34Hj2GHzgRhEdDR1bX3eweA==)
    default-encoding: UTF-8
    username: 2413176044@qq.com

# actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always', 'de1c37757329b0ad75488bf39024489c', '2023-01-16 12:01:23.000000', '2023-07-21 12:37:26.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-monitor', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'spring boot admin monitor', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (103, 'application-common-elasticsearch.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

spring:
  # elasticsearch
  elasticsearch:
    uris:
     - https://elasticsearch.laokou.org:9200
    username: ENC(svQedUe/LhX4+kE58LA73GTbkn0xR1Nz4P9hIalcloHMkQ8BCur8LiptBZ9DI78f)
    password: ENC(XVR9OF604T3+2BINpvvCohjr7/KM/vuP3ZgYpu+FX/h3uogFI3sh26h8wHPBE+rj)
    connection-timeout: 30s
    socket-timeout: 30s', '54cf98fa1e36856f525336acf7a5d20d', '2023-01-17 10:22:15.000000', '2024-04-07 20:52:38.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'elasticsearch公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1254, 'application-common-seata.yaml', 'LAOKOU_GROUP', e'# seata
seata:
  saga:
    enabled: true
    state-machine:
      enable-async: true
      table-prefix: seata_
      async-thread-pool:
        core-pool-size: 1
        max-pool-size: 20
        keep-alive-time: 60
      trans-operation-timeout: 1800000
      service-invoke-timeout: 300000
      auto-register-resources: true
      resources:
        - classpath*:seata/saga/statelang/**/*.json
      default-tenant-id: 0
      charset: UTF-8
  client:
    tm:
      default-global-transaction-timeout: 30000
  config:
    type: nacos
    nacos:
      server-addr: nacos.laokou.org
      namespace: a61abd4c-ef96-42a5-99a1-616adee531f3
      username: nacos
      password: nacos
      group: SEATA_GROUP
      data-id: seataServer.properties
  registry:
    type: nacos
    nacos:
      namespace: a61abd4c-ef96-42a5-99a1-616adee531f3
      group: SEATA_GROUP
      username: nacos
      password: nacos
      server-addr: nacos.laokou.org
  enabled: true
  tx-service-group: default_tx_group
  data-source-proxy-mode: AT', '32215c266a24f57c2adfa11ded3a6bbc', '2023-01-18 13:53:56.000000', '2024-02-20 11:40:38.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'seata公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1270, 'application-common-rocketmq.yaml', 'LAOKOU_GROUP', e'rocketmq:
  producer:
    group: laokou_producer_group
  name-server: rocketmq.laokou.org:9876
  consumer:
    pull-batch-size: 16', '540e67a6edad605be9959a9652d383e2', '2023-01-21 10:43:04.000000', '2023-11-06 18:10:30.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'rocketmq公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1475, 'application-sms.yaml', 'LAOKOU_GROUP', e'sms:
  # 0：国阳云
  type: 0
  gyy:
    templateId: 908e94ccf08b4476ba6c876d13f084ad
    signId: 3f45af8aa12f4d59be8b1f18b650ad81
    appcode: 6b3e98d5f39848cba9615d576ce78d9e', 'c5d95dadb7e5b2fe9db27ce8cae73118', '2023-02-13 19:59:35.000000', '2023-03-12 17:14:13.000000', 'nacos', '8.8.8.8', 'laokou-sms', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'sms配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1477, 'application-mail.yaml', 'LAOKOU_GROUP', e'spring:
  # mail
  mail:
    host: smtp.qq.com
    username: 2413176044@qq.com
    password: hhqkeodvfywfebaf
    default-encoding: UTF-8', '665c8cf5a8522b5f64ae86f9e816e89e', '2023-02-13 20:00:32.000000', '2023-02-13 20:00:47.000000', 'nacos', '192.168.62.1', 'laokou-mail', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'mail配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1567, 'gateway-flow.json', 'LAOKOU_GROUP', e'[
  {
    "resource": "laokou-auth",
    "grade": 1,
    "count": 300,
    "intervalSec": 1,
    "burst": 1000,
    "controlBehavior": 0
  },
  {
    "resource": "laokou-admin",
    "grade": 1,
    "count": 300,
    "intervalSec": 1,
    "burst": 1000,
    "controlBehavior": 0
  }
]', 'c5fbcf8031ce039bb97bd44cbfbca16b', '2023-02-26 14:59:20.000000', '2023-04-01 14:42:04.000000', 'nacos', '127.0.0.1', 'laokou-gateway', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'gateway sentinel flow rule', '', '', 'json', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1568, 'auth-flow.json', 'LAOKOU_GROUP', e'[
  {
    "resource": "/v1/captchas/{uuid}",
    "limitApp": "default",
    "count": 300,
    "grade": 1,
    "strategy": 0,
    "controlBehavior": 0
  },
  {
    "resource": "/v1/secrets",
    "limitApp": "default",
    "count": 300,
    "grade": 1,
    "strategy": 0,
    "controlBehavior": 0
  }
]', '095ca881af8089664d3852771a743894', '2023-02-26 15:01:51.000000', '2023-09-12 02:26:56.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-auth', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'auth sentinel  flow rule', '', '', 'json', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1569, 'admin-flow.json', 'LAOKOU_GROUP', e'[
  {
    "resource": "/v1/users/profile",
    "limitApp": "default",
    "count": 300,
    "grade": 1,
    "strategy": 0,
    "controlBehavior": 0
  }
]', '9860e7087b9cf7707d78c2fedb740cab', '2023-02-26 15:03:07.000000', '2023-09-12 02:27:49.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-admin', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'admin sentinel flow rule', '', '', 'json', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1799, 'application-common-monitor.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

# spring
spring:
  # https://codecentric.github.io/spring-boot-admin/current
  boot:
    # admin
    admin:
      client:
        url: https://monitor.laokou.org:5000
        # root
        username: ENC(esZnNM2DrSxZhgTOzu11W2fVsJDDZ1b12aPopMMHCS7lF5+BJun9ri6y5pTUdj6L)
        # laokou123
        password: ENC(mHjKcITM5U60bq7M4fxh4yUQ9L3PPWPskvnWRE0PVxIqQ34Ztx7zOESwWCdjeWPW)', '7d934a9e4b0ebe9803a17ccd520dca3e', '2023-07-18 16:59:45.000000', '2023-11-06 18:09:16.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'monitor公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2118, 'application-report.yaml', 'LAOKOU_GROUP', e'server:
  port: 8088', '89f7b26715cf760d099a258200381fe0', '2023-10-01 04:56:06.000000', '2024-05-01 00:45:57.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-report', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2159, 'application-common-kafka.yaml', 'LAOKOU_GROUP', e'spring:
  kafka:
    bootstrap-servers: kafka.laokou.org:9092
    consumer:
      # 禁用自动提交（按周期）已消费offset
      enable-auto-commit: false
      # 单次poll()调用返回的记录数
      max-poll-records: 50
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      # 发生错误后，消息重发的次数。
      retries: 5
      #当有多个消息需要被发送到同一个分区时，生产者会把它们放在同一个批次里。该参数指定了一个批次可以使用的内存大小，按照字节数计算。
      batch-size: 16384
      # 设置生产者内存缓冲区的大小。
      buffer-memory: 33554432
      # 键的序列化方式
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      # 值的序列化方式
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
      # acks=0 ： 生产者在成功写入消息之前不会等待任何来自服务器的响应。
      # acks=1 ： 只要集群的首领节点收到消息，生产者就会收到一个来自服务器成功响应。
      # acks=all ：只有当所有参与复制的节点全部收到消息时，生产者才会收到一个来自服务器的成功响应。
      acks: 0
    listener:
      # 在侦听器容器中运行的线程数。
      concurrency: 5
      # listner负责ack，每调用一次，就立即commit
      ack-mode: manual
      # 批量batch类型
      type: batch
      # topic不存在报错
      missing-topics-fatal: false', '157c7aaa53329ababa1aab96b9878fad', '2023-10-26 08:54:23.000000', '2023-11-06 18:14:00.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'kafka公共配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2178, 'application-logstash.yaml', 'LAOKOU_GROUP', e'spring:
  xxl-job:
    admin:
      address: http://xxl.job.laokou.org:9095/xxl-job-admin
    executor:
      app-name: laokou-logstash
      port: -1
      log-path: ./logs/xxl-job/laokou-logstash
      access-token: yRagfkAddGXdTySYTFzhvMguinulMIMSCcXUbljWDhe
      intentionalities: 7', '81c3de6319db8560c68935977f2d141f', '2023-11-03 07:37:45.000000', '2024-01-30 14:46:47.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-logstash', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2260, 'seataServer.properties', 'SEATA_GROUP', e'#For details about configuration items, see https://seata.io/zh-cn/docs/user/configurations.html
#Transport configuration, for client and server
transport.type=TCP
transport.server=NIO
transport.heartbeat=true
transport.enableTmClientBatchSendRequest=false
transport.enableRmClientBatchSendRequest=true
transport.enableTcServerBatchSendResponse=false
transport.rpcRmRequestTimeout=30000
transport.rpcTmRequestTimeout=30000
transport.rpcTcRequestTimeout=30000
transport.threadFactory.bossThreadPrefix=NettyBoss
transport.threadFactory.workerThreadPrefix=NettyServerNIOWorker
transport.threadFactory.serverExecutorThreadPrefix=NettyServerBizHandler
transport.threadFactory.shareBossWorker=false
transport.threadFactory.clientSelectorThreadPrefix=NettyClientSelector
transport.threadFactory.clientSelectorThreadSize=1
transport.threadFactory.clientWorkerThreadPrefix=NettyClientWorkerThread
transport.threadFactory.bossThreadSize=1
transport.threadFactory.workerThreadSize=default
transport.shutdown.wait=3
transport.serialization=seata
transport.compressor=none

#Transaction routing rules configuration, only for the client
service.vgroupMapping.default_tx_group=default
#If you use a registry, you can ignore it
service.default.grouplist=seata.laokou.org:8091
service.enableDegrade=false
service.disableGlobalTransaction=false

client.metadataMaxAgeMs=30000
#Transaction rule configuration, only for the client
client.rm.asyncCommitBufferLimit=10000
client.rm.lock.retryInterval=10
client.rm.lock.retryTimes=30
client.rm.lock.retryPolicyBranchRollbackOnConflict=true
client.rm.reportRetryCount=5
client.rm.tableMetaCheckEnable=true
client.rm.tableMetaCheckerInterval=60000
client.rm.sqlParserType=hikari
client.rm.reportSuccessEnable=false
client.rm.sagaBranchRegisterEnable=false
client.rm.sagaJsonParser=jackson
client.rm.tccActionInterceptorOrder=-2147482648
client.tm.commitRetryCount=5
client.tm.rollbackRetryCount=5
client.tm.defaultGlobalTransactionTimeout=60000
client.tm.degradeCheck=false
client.tm.degradeCheckAllowTimes=10
client.tm.degradeCheckPeriod=2000
client.tm.interceptorOrder=-2147482648
client.undo.dataValidation=true
client.undo.logSerialization=jackson
client.undo.onlyCareUpdateColumns=true
server.undo.logSaveDays=7
server.undo.logDeletePeriod=86400000
client.undo.logTable=undo_log
client.undo.compress.enable=true
client.undo.compress.type=zip
client.undo.compress.threshold=64k
#For TCC transaction mode
tcc.fence.logTableName=tcc_fence_log
tcc.fence.cleanPeriod=1h
# You can choose from the following options: fastjson, jackson, gson
tcc.contextJsonParserType=fastjson

#Log rule configuration, for client and server
log.exceptionRate=100

#Transaction storage configuration, only for the server. The file, db, and redis configuration values are optional.
store.mode=redis
store.lock.mode=redis
store.session.mode=redis
#Used for password encryption
store.publicKey=

#If `store.mode,store.lock.mode,store.session.mode` are not equal to `file`, you can remove the configuration block.
store.file.dir=file_store/data
store.file.maxBranchSessionSize=16384
store.file.maxGlobalSessionSize=512
store.file.fileWriteBufferCacheSize=16384
store.file.flushDiskMode=async
store.file.sessionReloadReadSize=100

#These configurations are required if the `store mode` is `db`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `db`, you can remove the configuration block.
store.db.datasource=hikari
store.db.dbType=mysql
store.db.driverClassName=com.mysql.cj.jdbc.Driver
store.db.url=jdbc:mysql://mysql.laokou.org:3306/kcloud_platform_alibaba_seata?useUnicode=true&rewriteBatchedStatements=true
store.db.user=root
store.db.password=laokou123
store.db.minConn=5
store.db.maxConn=30
store.db.globalTable=global_table
store.db.branchTable=branch_table
store.db.distributedLockTable=distributed_lock
store.db.queryLimit=100
store.db.lockTable=lock_table
store.db.maxWait=5000

#These configurations are required if the `store mode` is `redis`. If `store.mode,store.lock.mode,store.session.mode` are not equal to `redis`, you can remove the configuration block.
store.redis.mode=single
store.redis.type=pipeline
store.redis.single.host=redis.laokou.org
store.redis.single.port=6379
store.redis.sentinel.masterName=
store.redis.sentinel.sentinelHosts=
store.redis.sentinel.sentinelPassword=
store.redis.maxConn=10
store.redis.minConn=1
store.redis.maxTotal=100
store.redis.database=0
store.redis.password=laokou123
store.redis.queryLimit=100

#Transaction rule configuration, only for the server
server.recovery.committingRetryPeriod=1000
server.recovery.asynCommittingRetryPeriod=1000
server.recovery.rollbackingRetryPeriod=1000
server.recovery.timeoutRetryPeriod=1000
server.maxCommitRetryTimeout=-1
server.maxRollbackRetryTimeout=-1
server.rollbackRetryTimeoutUnlockEnable=false
server.distributedLockExpireTime=10000
server.session.branchAsyncQueueSize=5000
server.session.enableBranchAsyncRemove=false
server.enableParallelRequestHandle=true
server.enableParallelHandleBranch=false

server.raft.cluster=seata.laokou.org:7091,seata.laokou.org:7092,seata.laokou.org:7093
server.raft.snapshotInterval=600
server.raft.applyBatch=32
server.raft.maxAppendBufferSize=262144
server.raft.maxReplicatorInflightMsgs=256
server.raft.disruptorBufferSize=16384
server.raft.electionTimeoutMs=2000
server.raft.reporterEnabled=false
server.raft.reporterInitialDelay=60
server.raft.serialization=jackson
server.raft.compressor=none
server.raft.sync=true

#Metrics configuration, only for the server
metrics.enabled=false
metrics.registryType=compact
metrics.exporterList=prometheus
metrics.exporterPrometheusPort=9898', '26217408b5ee26c2fec37325ea785e2f', '2023-11-27 16:36:34.000000', '2024-03-04 11:55:27.000000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-seata', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'seata配置', '', '', 'properties', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2307, 'application-common-flyway.yaml', 'LAOKOU_GROUP', e'spring:
  flyway:
    # 起始版本
    baseline-version: 0
    # 历史记录
    baseline-on-migrate: true
    # 避免数据被意外清空
    clean-disabled: false', 'd3ec18f7c8327f45c48a7783f6d48b64', '2024-01-03 07:54:41.000000', '2024-01-03 07:54:41.000000', 'nacos', '0:0:0:0:0:0:0:1', '', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'flyway公共配置', null, null, 'yaml', null, '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1570, 'admin-degrade.json', 'LAOKOU_GROUP', e'[
  {
    "resource": "POST:https://laokou-flowable/work/task/api/query",
    "count": 200,
    "grade": 0,
    "slowRatioThreshold": 0.1,
    "minRequestAmount": 5,
    "timeWindow": 30
  },
  {
    "resource": "POST:https://laokou-flowable/work/definition/api/query",
    "count": 200,
    "grade": 0,
    "slowRatioThreshold": 0.1,
    "minRequestAmount": 5,
    "timeWindow": 30
  }
]', '2c0d4de0716f94bd6878b0a68d3faa0f', '2023-02-26 15:55:49.000000', '2024-05-03 09:24:56.976000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-admin', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'admin sentinel degrade rule', '', '', 'json', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (1273, 'application-gateway.yaml', 'LAOKOU_GROUP', e'# springdoc
spring:
  cloud:
    gateway:
      ip:
        enabled: true
        label: black
springdoc:
  swagger-ui:
    urls:
      - name: admin
        url: /v3/api-docs/admin
      - name: auth
        url: /v3/api-docs/auth', 'fe482cd291193a1bd85295c5dd363221', '2023-01-22 13:16:13.000000', '2024-05-05 22:11:33.663000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-gateway', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'gateway配置', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2022, 'application-admin.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

# spring
spring:
  datasource:
    dynamic:
      # 默认false,建议线上关闭
      p6spy: false
      #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源
      strict: true
      datasource:
        master:
          type: com.zaxxer.hikari.HikariDataSource
          driver-class-name: org.postgresql.Driver
          url: jdbc:postgresql://postgresql.laokou.org:5432/kcloud_platform_iot?tcpKeepAlive=true&reWriteBatchedInserts=true&ApplicationName=flyway-postgresql&useSSL=false&reWriteBatchedInserts=true
          username: ENC(OuDQnY2CK0z2t+sq1ihFaFHWve1KjJoRo1aPyAghuRAf9ad3BO6AjcJRA+1b/nZw)
          password: ENC(XVR9OF604T3+2BINpvvCohjr7/KM/vuP3ZgYpu+FX/h3uogFI3sh26h8wHPBE+rj)
          # https://blog.csdn.net/u014644574/article/details/123680515
          hikari:
            pool-name: HikariCP
            connection-timeout: 180000
            validation-timeout: 3000
            idle-timeout: 180000
            max-lifetime: 1800000
            maximum-pool-size: 60
            minimum-idle: 10
            is-read-only: false
# mybatis-plus
mybatis-plus:
  # 全局处理
  global-config:
    db-config:
      column-format: "\\"%s\\""
  tenant:
    ignore-tables:
      - boot_sys_tenant
      - boot_sys_source
      - boot_sys_package_menu
      - boot_sys_package
    enabled: true
  mapper-locations: classpath*:/mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl', 'b4d6b53b97b48c6a71c066a879985fcf', '2023-09-28 11:37:33.000000', '2024-05-10 22:18:58.386000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-admin', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '', '', '', 'yaml', '', '');
INSERT INTO public.config_info (id, data_id, group_id, content, md5, gmt_create, gmt_modified, src_user, src_ip, app_name, tenant_id, c_desc, c_use, effect, type, c_schema, encrypted_data_key) VALUES (2025, 'application-auth.yaml', 'LAOKOU_GROUP', e'# jasypt
jasypt:
  encryptor:
    password: 5201314wumeihua

# spring
spring:
  datasource:
    dynamic:
      # 默认false,建议线上关闭
      p6spy: false
      #设置严格模式,默认false不启动. 启动后在未匹配到指定数据源时候会抛出异常,不启动则使用默认数据源
      strict: true
      datasource:
        master:
          type: com.zaxxer.hikari.HikariDataSource
          driver-class-name: org.postgresql.Driver
          url: jdbc:postgresql://postgresql.laokou.org:5432/kcloud_platform_iot?tcpKeepAlive=true&reWriteBatchedInserts=true&ApplicationName=flyway-postgresql&useSSL=false&reWriteBatchedInserts=true
          username: ENC(OuDQnY2CK0z2t+sq1ihFaFHWve1KjJoRo1aPyAghuRAf9ad3BO6AjcJRA+1b/nZw)
          password: ENC(XVR9OF604T3+2BINpvvCohjr7/KM/vuP3ZgYpu+FX/h3uogFI3sh26h8wHPBE+rj)
          # https://blog.csdn.net/u014644574/article/details/123680515
          hikari:
            connection-timeout: 60000
            validation-timeout: 3000
            idle-timeout: 60000
            max-lifetime: 60000
            maximum-pool-size: 30
            minimum-idle: 10
            is-read-only: false
# mybatis-plus
mybatis-plus:
  # 全局处理
  global-config:
    db-config:
      column-format: "\\"%s\\""
  tenant:
    enabled: true
    ignore-tables:
      - boot_sys_source
      - boot_sys_tenant
  mapper-locations: classpath*:/mapper/**/*.xml
  configuration:
    log-impl: org.apache.ibatis.logging.nologging.NoLoggingImpl', '432bd1f726a6f2d6e84629261c3a2730', '2023-09-28 11:51:44.000000', '2024-05-10 22:19:09.347000', 'nacos', '0:0:0:0:0:0:0:1', 'laokou-auth', 'a61abd4c-ef96-42a5-99a1-616adee531f3', '', '', '', 'yaml', '', '');

create table if not exists public.config_info_aggr
(
	id           bigint generated by default as identity
	primary key,
	data_id      varchar(255) not null,
	group_id     varchar(128) not null,
	datum_id     varchar(255) not null,
	content      text         not null,
	gmt_modified timestamp(6) not null,
	app_name     varchar(128),
	tenant_id    varchar(128) default ''::character varying
	);

comment on table public.config_info_aggr is '增加租户字段';

comment on column public.config_info_aggr.id is 'id';

comment on column public.config_info_aggr.data_id is 'data_id';

comment on column public.config_info_aggr.group_id is 'group_id';

comment on column public.config_info_aggr.datum_id is 'datum_id';

comment on column public.config_info_aggr.content is '内容';

comment on column public.config_info_aggr.gmt_modified is '修改时间';

comment on column public.config_info_aggr.tenant_id is '租户字段';

alter table public.config_info_aggr
	owner to root;

create unique index if not exists config_info_aggr_data_id_group_id_tenant_id_datum_id_idx
	on public.config_info_aggr (data_id, group_id, tenant_id, datum_id);

create table if not exists public.config_info_beta
(
	id                 bigint generated by default as identity
	primary key,
	data_id            varchar(255)                           not null,
	group_id           varchar(128)                           not null,
	app_name           varchar(128),
	content            text                                   not null,
	beta_ips           varchar(1024),
	md5                varchar(32),
	gmt_create         timestamp(6) default CURRENT_TIMESTAMP not null,
	gmt_modified       timestamp(6) default CURRENT_TIMESTAMP not null,
	src_user           text,
	src_ip             varchar(50),
	tenant_id          varchar(128) default ''::character varying,
	encrypted_data_key text                                   not null
	);

comment on table public.config_info_beta is 'config_info_beta';

comment on column public.config_info_beta.id is 'id';

comment on column public.config_info_beta.data_id is 'data_id';

comment on column public.config_info_beta.group_id is 'group_id';

comment on column public.config_info_beta.app_name is 'app_name';

comment on column public.config_info_beta.content is 'content';

comment on column public.config_info_beta.beta_ips is 'betaIps';

comment on column public.config_info_beta.md5 is 'md5';

comment on column public.config_info_beta.gmt_create is '创建时间';

comment on column public.config_info_beta.gmt_modified is '修改时间';

comment on column public.config_info_beta.src_user is 'source user';

comment on column public.config_info_beta.src_ip is 'source ip';

comment on column public.config_info_beta.tenant_id is '租户字段';

comment on column public.config_info_beta.encrypted_data_key is '秘钥';

alter table public.config_info_beta
	owner to root;

create unique index if not exists config_info_beta_data_id_group_id_tenant_id_idx
	on public.config_info_beta (data_id, group_id, tenant_id);

create table if not exists public.config_info_tag
(
	id           bigint generated by default as identity
	primary key,
	data_id      varchar(255)                           not null,
	group_id     varchar(128)                           not null,
	tenant_id    varchar(128) default ''::character varying,
	tag_id       varchar(128)                           not null,
	app_name     varchar(128),
	content      text                                   not null,
	md5          varchar(32),
	gmt_create   timestamp(6) default CURRENT_TIMESTAMP not null,
	gmt_modified timestamp(6) default CURRENT_TIMESTAMP not null,
	src_user     text,
	src_ip       varchar(50)
	);

comment on table public.config_info_tag is 'config_info_tag';

comment on column public.config_info_tag.id is 'id';

comment on column public.config_info_tag.data_id is 'data_id';

comment on column public.config_info_tag.group_id is 'group_id';

comment on column public.config_info_tag.tenant_id is 'tenant_id';

comment on column public.config_info_tag.tag_id is 'tag_id';

comment on column public.config_info_tag.app_name is 'app_name';

comment on column public.config_info_tag.content is 'content';

comment on column public.config_info_tag.md5 is 'md5';

comment on column public.config_info_tag.gmt_create is '创建时间';

comment on column public.config_info_tag.gmt_modified is '修改时间';

comment on column public.config_info_tag.src_user is 'source user';

comment on column public.config_info_tag.src_ip is 'source ip';

alter table public.config_info_tag
	owner to root;

create unique index if not exists config_info_tag_data_id_group_id_tenant_id_tag_id_idx
	on public.config_info_tag (data_id, group_id, tenant_id, tag_id);

create table if not exists public.config_tags_relation
(
	id        bigint       not null,
	tag_name  varchar(128) not null,
	tag_type  varchar(64),
	data_id   varchar(255) not null,
	group_id  varchar(128) not null,
	tenant_id varchar(128) default ''::character varying,
	nid       bigint generated by default as identity
	primary key
	);

comment on table public.config_tags_relation is 'config_tag_relation';

comment on column public.config_tags_relation.id is 'id';

comment on column public.config_tags_relation.tag_name is 'tag_name';

comment on column public.config_tags_relation.tag_type is 'tag_type';

comment on column public.config_tags_relation.data_id is 'data_id';

comment on column public.config_tags_relation.group_id is 'group_id';

comment on column public.config_tags_relation.tenant_id is 'tenant_id';

alter table public.config_tags_relation
	owner to root;

create unique index if not exists config_tags_relation_id_tag_name_tag_type_idx
	on public.config_tags_relation (id, tag_name, tag_type);

create index if not exists config_tags_relation_tenant_id_idx
	on public.config_tags_relation (tenant_id);

INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1477, 'mail', '', 'application-mail.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 172);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1475, 'sms', '', 'application-sms.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 346);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1567, 'gateway', '', 'gateway-flow.json', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 358);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (82, 'monitor', '', 'application-monitor.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 469);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (16, 'redis', '', 'application-common-redis.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 672);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1254, 'seata', '', 'application-common-seata.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 675);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1270, 'rocketmq', '', 'application-common-rocketmq.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 678);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (2159, 'kafka', '', 'application-common-kafka.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 684);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (2178, 'logstash', '', 'application-logstash.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 685);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (103, 'elasticsearch', '', 'application-common-elasticsearch.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 689);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (26, 'gateway', '', 'router.json', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 698);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (17, 'common', '', 'application-common.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 714);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1273, 'gateway', '', 'application-gateway.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 717);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (2118, 'report', '', 'application-report.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 720);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (1570, 'admin', '', 'admin-degrade.json', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 4);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (2022, 'admin', '', 'application-admin.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 11);
INSERT INTO public.config_tags_relation (id, tag_name, tag_type, data_id, group_id, tenant_id, nid) VALUES (2025, 'auth', '', 'application-auth.yaml', 'LAOKOU_GROUP', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 12);

create table if not exists public.group_capacity
(
	id                bigint generated by default as identity
	primary key,
	group_id          varchar(128) default ''::character varying not null,
	quota             bigint       default 0                     not null,
	usage             bigint       default 0                     not null,
	max_size          bigint       default 0                     not null,
	max_aggr_count    bigint       default 0                     not null,
	max_aggr_size     bigint       default 0                     not null,
	max_history_count bigint       default 0                     not null,
	gmt_create        timestamp(6) default CURRENT_TIMESTAMP     not null,
	gmt_modified      timestamp(6) default CURRENT_TIMESTAMP     not null
	);

comment on table public.group_capacity is '集群、各Group容量信息表';

comment on column public.group_capacity.id is '主键ID';

comment on column public.group_capacity.group_id is 'Group ID，空字符表示整个集群';

comment on column public.group_capacity.quota is '配额，0表示使用默认值';

comment on column public.group_capacity.usage is '使用量';

comment on column public.group_capacity.max_size is '单个配置大小上限，单位为字节，0表示使用默认值';

comment on column public.group_capacity.max_aggr_count is '聚合子配置最大个数，，0表示使用默认值';

comment on column public.group_capacity.max_aggr_size is '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值';

comment on column public.group_capacity.max_history_count is '最大变更历史数量';

comment on column public.group_capacity.gmt_create is '创建时间';

comment on column public.group_capacity.gmt_modified is '修改时间';

alter table public.group_capacity
	owner to root;

create unique index if not exists group_capacity_group_id_idx
	on public.group_capacity (group_id);

create table if not exists public.his_config_info
(
	id                 bigint                                 not null,
	nid                bigint generated by default as identity
	primary key,
	data_id            varchar(255)                           not null,
	group_id           varchar(128)                           not null,
	app_name           varchar(128),
	content            text                                   not null,
	md5                varchar(32),
	gmt_create         timestamp(6) default CURRENT_TIMESTAMP not null,
	gmt_modified       timestamp(6) default CURRENT_TIMESTAMP not null,
	src_user           text,
	src_ip             varchar(50),
	op_type            char(10),
	tenant_id          varchar(128) default ''::character varying,
	encrypted_data_key text                                   not null
	);

comment on table public.his_config_info is '多租户改造';

comment on column public.his_config_info.app_name is 'app_name';

comment on column public.his_config_info.tenant_id is '租户字段';

comment on column public.his_config_info.encrypted_data_key is '秘钥';

alter table public.his_config_info
	owner to root;

create index if not exists his_config_info_data_id_idx
	on public.his_config_info (data_id);

create index if not exists his_config_info_gmt_create_idx
	on public.his_config_info (gmt_create);

create index if not exists his_config_info_gmt_modified_idx
	on public.his_config_info (gmt_modified);

create table if not exists public.permissions
(
	role     varchar(50)  not null,
	resource varchar(255) not null,
	action   varchar(8)   not null
	);

alter table public.permissions
	owner to root;

create unique index if not exists permissions_role_resource_action_idx
	on public.permissions (role, resource, action);

INSERT INTO public.permissions (role, resource, action) VALUES ('ADMIN', ':*:*', 'rw');
INSERT INTO public.permissions (role, resource, action) VALUES ('ADMIN', 'a61abd4c-ef96-42a5-99a1-616adee531f3:*:*', 'rw');
INSERT INTO public.permissions (role, resource, action) VALUES ('ROLE_ADMIN', ':*:*', 'rw');
INSERT INTO public.permissions (role, resource, action) VALUES ('ROLE_ADMIN', 'a61abd4c-ef96-42a5-99a1-616adee531f3:*:*', 'rw');

create table if not exists public.roles
(
	username varchar(50) not null,
	role     varchar(50) not null
	);

alter table public.roles
	owner to root;

create unique index if not exists roles_username_role_idx
	on public.roles (username, role);

INSERT INTO public.roles (username, role) VALUES ('laokou', 'ADMIN');
INSERT INTO public.roles (username, role) VALUES ('nacos', 'ROLE_ADMIN');

create table if not exists public.tenant_capacity
(
	id                bigint generated by default as identity
	primary key,
	tenant_id         varchar(128) default ''::character varying not null,
	quota             bigint       default 0                     not null,
	usage             bigint       default 0                     not null,
	max_size          bigint       default 0                     not null,
	max_aggr_count    bigint       default 0                     not null,
	max_aggr_size     bigint       default 0                     not null,
	max_history_count bigint       default 0                     not null,
	gmt_create        timestamp(6) default CURRENT_TIMESTAMP     not null,
	gmt_modified      timestamp(6) default CURRENT_TIMESTAMP     not null
	);

comment on table public.tenant_capacity is '租户容量信息表';

comment on column public.tenant_capacity.id is '主键ID';

comment on column public.tenant_capacity.tenant_id is 'Tenant ID';

comment on column public.tenant_capacity.quota is '配额，0表示使用默认值';

comment on column public.tenant_capacity.usage is '使用量';

comment on column public.tenant_capacity.max_size is '单个配置大小上限，单位为字节，0表示使用默认值';

comment on column public.tenant_capacity.max_aggr_count is '聚合子配置最大个数';

comment on column public.tenant_capacity.max_aggr_size is '单个聚合数据的子配置大小上限，单位为字节，0表示使用默认值';

comment on column public.tenant_capacity.max_history_count is '最大变更历史数量';

comment on column public.tenant_capacity.gmt_create is '创建时间';

comment on column public.tenant_capacity.gmt_modified is '修改时间';

alter table public.tenant_capacity
	owner to root;

create unique index if not exists tenant_capacity_tenant_id_idx
	on public.tenant_capacity (tenant_id);

create table if not exists public.tenant_info
(
	id            bigint generated by default as identity
	primary key,
	kp            varchar(128) not null,
	tenant_id     varchar(128) default ''::character varying,
	tenant_name   varchar(128) default ''::character varying,
	tenant_desc   varchar(256),
	create_source varchar(32),
	gmt_create    bigint       not null,
	gmt_modified  bigint       not null
	);

comment on table public.tenant_info is 'tenant_info';

comment on column public.tenant_info.id is 'id';

comment on column public.tenant_info.kp is 'kp';

comment on column public.tenant_info.tenant_id is 'tenant_id';

comment on column public.tenant_info.tenant_name is 'tenant_name';

comment on column public.tenant_info.tenant_desc is 'tenant_desc';

comment on column public.tenant_info.create_source is 'create_source';

comment on column public.tenant_info.gmt_create is '创建时间';

comment on column public.tenant_info.gmt_modified is '修改时间';

alter table public.tenant_info
	owner to root;

create unique index if not exists tenant_info_kp_tenant_id_idx
	on public.tenant_info (kp, tenant_id);

create index if not exists tenant_info_tenant_id_idx
	on public.tenant_info (tenant_id);

INSERT INTO public.tenant_info (id, kp, tenant_id, tenant_name, tenant_desc, create_source, gmt_create, gmt_modified) VALUES (2, '1', 'a61abd4c-ef96-42a5-99a1-616adee531f3', 'laokou', 'laokou', 'nacos', 1673556960289, 1673556960289);

create table if not exists public.users
(
	username varchar(50)          not null
		primary key,
	password varchar(500)         not null,
	enabled  boolean default true not null
);

alter table public.users
	owner to root;

INSERT INTO public.users (username, password, enabled) VALUES ('laokou', '$2a$10$75WIn2J5FoX9F5wEBdFsL.0cKdv5h8QqBMKMWBABhWAxKB4TO8WZq', true);
INSERT INTO public.users (username, password, enabled) VALUES ('nacos', '$2a$10$oVX1zRtaql9Jbsyzaaovx.TU2M6Bw0ZpCbPYWOIED58d1ougzaFRm', true);

UPDATE public.config_info SET content = '# spring
spring:
  # security
  security:
    oauth2:
      resource-server:
        enabled: true
        request-matcher:
          ignore-patterns:
            GET:
              - /**/v3/api-docs/**=laokou-gateway
              - /v3/api-docs/**=laokou-auth,laokou-admin
              - /swagger-ui.html=laokou-admin,laokou-gateway,laokou-auth
              - /swagger-ui/**=laokou-admin,laokou-gateway,laokou-auth
              - /actuator/**=laokou-admin,laokou-gateway,laokou-auth
              - /error=laokou-admin,laokou-auth
              - /v3/tenants/options=laokou-auth,laokou-gateway
              - /v3/tenants/id=laokou-auth,laokou-gateway
              - /favicon.ico=laokou-gateway
              - /v3/captchas/{uuid}=laokou-gateway,laokou-auth
              - /v3/secrets=laokou-gateway,laokou-auth
              - /graceful-shutdown=laokou-auth
              - /ws=laokou-gateway
            DELETE:
              - /v3/logouts=laokou-auth,laokou-gateway
  # task
  task-execution:
    thread-name-prefix: laokou-ttl-task-
    pool:
      core-size: 17
      keep-alive: 180s
  cloud:
    # 解决集成sentinel，openfeign启动报错，官方下个版本修复
    openfeign:
      compression:
        response:
          enabled: true
        request:
          enabled: true
      # FeignAutoConfiguration、OkHttpFeignLoadBalancerConfiguration、OkHttpClient#getClient、FeignClientProperties、OptionsFactoryBean#getObject
      # 在BeanFactory调用getBean()时，不是调用getBean，是调用getObject(),因此，getObject()相当于代理了getBean(),而且getObject()对Options初始化，是直接从openfeign.default获取配置值的
      okhttp:
        enabled: true
      circuitbreaker:
        enabled: true
      httpclient:
        enabled: false
        hc5:
          enabled: false
        disable-ssl-validation: true
      client:
        config:
          default:
            connectTimeout: 120000 #连接超时
            readTimeout: 120000 #读取超时
            logger-level: full
      lazy-attributes-resolution: true
    # sentinel
    sentinel:
      eager: true #开启饥饿加载，直接初始化
      transport:
        port: 8769
        dashboard: sentinel.laokou.org:8972

# actuator
management:
  endpoints:
    web:
      exposure:
        include: "*"
  endpoint:
    health:
      show-details: always

# springdoc
springdoc:
  swagger-ui:
    path: /swagger-ui.html

# server
server:
  servlet:
    encoding:
      charset: UTF-8
  undertow:
    threads:
      # 设置IO线程数，来执行非阻塞任务，负责多个连接数
      io: 16
      # 工作线程数
      worker: 256
    # 每块buffer的空间大小
    buffer-size: 1024
    # 分配堆外内存
    direct-buffers: true

# feign
feign:
  sentinel:
    enabled: true
    default-rule: default
    rules:
      # https://sentinelguard.io/zh-cn/docs/circuit-breaking.html
      default:
        - grade: 2 # 异常数策略
          count: 1 # 异常数模式下为对应的阈值
          timeWindow: 30 # 熔断时长，单位为 s（经过熔断时长后熔断器会进入探测恢复状态（HALF-OPEN 状态），若接下来的一个请求成功完成（没有错误）则结束熔断，否则会再次被熔断。ERROR_COUNT）
          statIntervalMs: 1000 # 统计时长（单位为 ms），如 60*1000 代表分钟级（1.8.0 引入）
          minRequestAmount: 5 # 熔断触发的最小请求数，请求数小于该值时即使异常比率超出阈值也不会熔断
tenant:
  domain-names:
    - laokou.org
    - laokouyun.org
    - laokou.org.cn'  WHERE id = 17;

UPDATE public.config_info SET content = '[
  {
    "id": "laokou-auth",
    "uri": "lb://laokou-auth",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/auth/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "auth",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/auth/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  },
  {
    "id": "laokou-admin",
    "uri": "lb://laokou-admin",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/admin/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "admin",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/admin/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  },
  {
    "id": "open-api",
    "uri": "https://127.0.0.1:5555",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/v3/api-docs/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "open-api",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/v3/api-docs/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}/v3/api-docs"
        }
      }
    ],
    "metadata": {},
    "order": 1
  },
  {
    "id": "laokou-im",
    "uri": "lb:wss://laokou-im",
    "predicates": [
      {
        "name": "Path",
        "args": {
          "pattern": "/im/**"
        }
      },
      {
        "name": "Weight",
        "args": {
          "_genkey_0": "im",
          "_genkey_1": "100"
        }
      }
    ],
    "filters": [
      {
        "name": "StripPrefix",
        "args": {
          "parts": "1"
        }
      },
      {
        "name": "RewritePath",
        "args": {
          "_genkey_0": "/im/(?<path>.*)",
          "_genkey_1": "/$\\\\{path}"
        }
      }
    ],
    "metadata": {
      "version": "2.0"
    },
    "order": 1
  }
]'  WHERE id = 26;

UPDATE public.config_info SET content = '# seata
seata:
  saga:
    enabled: true
    state-machine:
      enable-async: true
      table-prefix: seata_
      async-thread-pool:
        core-pool-size: 1
        max-pool-size: 20
        keep-alive-time: 60
      trans-operation-timeout: 1800000
      service-invoke-timeout: 300000
      auto-register-resources: true
      resources:
        - classpath*:seata/saga/statelang/**/*.json
      default-tenant-id: 0
      charset: UTF-8
  client:
    tm:
      default-global-transaction-timeout: 30000
  config:
    type: nacos
    nacos:
      server-addr: https://nacos.laokou.org:8848
      namespace: a61abd4c-ef96-42a5-99a1-616adee531f3
      username: nacos
      password: nacos
      group: SEATA_GROUP
      data-id: seataServer.properties
  registry:
    type: nacos
    nacos:
      namespace: a61abd4c-ef96-42a5-99a1-616adee531f3
      group: SEATA_GROUP
      username: nacos
      password: nacos
      server-addr: https://nacos.laokou.org:8848
  enabled: true
  tx-service-group: default_tx_group
  data-source-proxy-mode: AT' WHERE id = 1254;

UPDATE public.config_info SET content = '# springdoc
spring:
  cloud:
    gateway:
      ip:
        enabled: true
        label: black
springdoc:
  cache:
    disabled: false
  version: 3.1.0
  swagger-ui:
    use-root-path: true
  api-docs:
    version: openapi_3_1' WHERE id = 1273;
